services:
  zookeeper-service:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka-service:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-service:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-service:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9094:9094"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - zookeeper-service
    networks:
      - my-network

  database-service:
    image: mariadb:10.5
    environment:
      MYSQL_ROOT_PASSWORD: a
      MYSQL_PASSWORD: a
    ports:
      - "3306:3306" 
    volumes:
      - ./new_db_data:/var/lib/mysql
    networks:
      - my-network

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - my-network

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    depends_on:
      - service-registry
    ports:
      - "8090:8090"
    environment:
      - EUREKA_URL=http://service-registry:8761/eureka/
    networks:
      - my-network

  video-catalog-service:
    build:
      context: ./video-catalog-service
      dockerfile: Dockerfile
    depends_on:
      - service-registry
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
      - SPRING_DATASOURCE_URL=jdbc:mysql://database-service:3306/user_database?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=a
      - EUREKA_URL=http://service-registry:8761/eureka/
      - MINIO_ENDPOINT=http://minio-service:9000/
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin
      - DB_USERNAME=root
      - DB_PASSWORD=a
    networks:
      - my-network

  video-processing-service:
    build:
      context: ./video-processing-service
      dockerfile: Dockerfile
    depends_on:
      - service-registry
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
      - SPRING_DATASOURCE_URL=jdbc:mysql://database-service:3306/user_database?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=a
      - EUREKA_URL=http://service-registry:8761/eureka/
      - MINIO_ENDPOINT=http://minio-service:9000/
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin
      - REDIS_HOST=redis-service  
      - REDIS_PORT=6379
      - DB_USERNAME=root
      - DB_PASSWORD=a
    networks:
      - my-network

  # user-service:
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - service-registry
  #   environment:
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://database-service:3306/user_database?createDatabaseIfNotExist=true
  #     - SPRING_DATASOURCE_USERNAME=root
  #     - SPRING_DATASOURCE_PASSWORD=a
  #     - EUREKA_URL=http://service-registry:8761/eureka/
      # - DB_USERNAME=root
      # - DB_PASSWORD=a
  #   networks:
  #     - my-network
  #
  # node-auth-service:
  #   build:
  #     context: ./node-auth-service
  #     dockerfile: Dockerfile
  #   environment:
  #     - EUREKA_HOST=service-registry
  #     - HOST=node-auth-service
  #     - EUREKA_URL=http://service-registry:8761/eureka/apps/
  #   depends_on:
  #     - service-registry
  #   networks:
  #     - my-network
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  minio-service:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: admin          # MinIO access key
      MINIO_ROOT_PASSWORD: admin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"     # MinIO API
      - "9001:9001"     # MinIO Console
    volumes:
      - ./minio_data:/data  # Persist data using a Docker volume
    networks:
      - my-network

  redis-service:
    image: redis:latest
    ports:
      - "6379:6379" 
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
